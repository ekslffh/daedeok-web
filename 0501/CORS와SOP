CORS(Cross Origin Resource Sharing, 교차출처리소스공유)
    헤더를 통해 다른 출처의 자원에 접근할 수 있는 권한 여부를 브라우저에 알리는 체제
    리소스를 제공하는 해당 서버에서 헤더정보를 직접 설정해줘야 가능함

    >> 헤더정보 중 Access-Control-Allow-Origin을 같이 제공해줘야 리소스에 접근하고 활용가능

SOP(Same Origin Policy, 동일 출처 정책)
    같은 출처(protocol, port, host)에서만 리소스를 공유할 수 있는 브라우저 규칙
    브라우저에서 다른 서버로 요청시 SOP정책에 걸리게 됨
    (브라우저에서만 해당되는 정책이므로 서버 to 서버, 서버 간 통신에서는 정책이 적용되지 않음)

정리
    1. 자바스크립트에서 외부 서버로 ajax요청을 할 경우 sop정책에 의해 요청 실패함
    ㄴ sop정책이란 - 같은 출처에서만 리소스를 받을 수 있는 브라우저의 규칙이다
    ㄴ 보안적으로 좋은 정책이지만 외부 호출이 빈번한 대규모의 프로젝트에서는 약간 번거로움

    2. 때문에 sop를 회피하기 위한 편법의 방법으로 jsonp방식을 활용
    ㄴ html요소를 활용해 외부자원을 받아오는 방식은 sop정책에 적용받지 않는 점을 이용한 것

    3. 위와 같은 편법적인 방식을 대체하기 위한 추가 정책인 CORS의 등장
    ㄴ 하지만 제공하는 서버에서 리소스 사용을 허락해줘야 하는 사용가능한 점이 단점

    4. 때문에 또다른 방식으로 CORS를 회피할 수 있는 방식이 탄생하였고,
    ㄴ 테스트 용도로만 사용가능한 플러그인 설치하기
    ㄴ 타 개발자들이 만들어 놓은 대리 서버 이용하기
    ㄴ 서버 간 통신에서는 정책이 적용되지 않음을 이용한 서버에서의 요청 하기 등등을 사용하여 외부 리소스 받음